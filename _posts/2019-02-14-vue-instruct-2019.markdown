---
layout:     post
title:      "vue指令字典"
subtitle:   " \"Hello World, Hello Blog\""
date:       2019-02-14 12:00:00
author:     "idemon"
header-img: "img/post-bg-alibaba.jpg"
catalog: true
tags:
    - 技术
    - Vue
    - 前端
---

> “谁不会休息，谁就不会工作。 —— 列宁 ”



## v-if&v-else
vue的if标签：   其中v-else不能单独使用，必须配合v-if使用
用法：
html:
```html
    <div v-if="isLogin">你好，idemon</div>
    <div v-else="isLogin"><a href="#">请登陆!!!</a></div>
```
js
```javaScript
    var app = new Vue({
        el : '#app',            //element需要选中标签  --相当于选择器
        data : {
            isLogin:true
        }
    });
```
## v-show---设置dispaly
他的用法跟v-if很像
html:
```html
	 <div v-show="isLogin">你好，idemon</div>
 ```
调整css中display属性，DOM已经加载，只是CSS控制没有显示出来。
## v-if 和v-show的区别：
• v-if： 判断是否加载，可以减轻服务器的压力，在需要时加载。
• v-show：调整css dispaly属性，可以使客户端操作更加流畅。
## v-for指令  --循环
需要哪个标签循环写在哪个标签上
html:
```html
    <li v-for="item in items">
        {{item}}
    </li>
```
js:
```js
	var app=new Vue({
	     el:'#app',
	     data:{
	         items:[20,23,18,65,32,19,54,56,41]
	     }
	})
```
如果想对items进行排序：
&nbsp;&nbsp;&nbsp;&nbsp;Vue的computed:     计算 属性 （之后会有文章详细讲到Vue的属性）
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*由于vue有保护机制，vue会保护data中的数据，那么在computed中就不可以在定义一个与data中名字相同的名字。*
```html
	 <li v-for="item in sortItems">
	            {{item}}
	 </li>
```
```js
	var test = new Vue({
	        el:'#app',//element需要选中标签  --相当于选择器
	        data:{
	            items : [12,23,345,4,56,23,76]
	        },
	        computed:{//在输出(items)之前进行处理
	            sortItems:function () {
	                return this.items.sort(sortNumber);
	            }
	        }
	    });
	    function sortNumber(a,b){
	        return a-b;
	    }
	//因为判断的是第一位的asc码，所以需要加入判断函数
```
```html
//* 对象进行排序
	<li v-for="(item,index) in sortStudent">a
	            {{index+1}}:{{item.name}}--{{item.age}}
	</li>
```
(item,index)其中第二个参数是自定义的，表示下标的索引，从0开始
下面开始对对象数组进行排序：
```js
	 sortStudent:function () {
	                return sortByKey(this.students,'age');
	 }
	//数组对象方法排序:1.数组，2.排序的列
	function sortByKey(array,key){
	        return array.sort(function(a,b){
	            var x=a[key];
	            var y=b[key];
	            return ((x<y)?-1:((x>y)?1:0));
	        });
	    }
```
## v-text&v-html
其中设置的v-text，就会将标签中显示的文本覆盖，只会显示v-text中内容，即便是{{xxx}}也不会显示
为了防止网速过慢的时候显示不出来{{xxxx}}，有的时候就可以用v-text,加载指定的数据：
```html		
		<span>{{ message }}</span>=<span v-text="message"></span><br/>
```
其中都会显示message中的数据，但是后面的不会显示出{{xxxx}}，效果相同
如果想用javascript写html代码，用v-text是输出不出来的，会被当作纯文本，这时候就需要用v-html：
`	<span v-html="msgHtml"></span>`
双大花括号会将数据解释为纯文本
```js
	data:{
        msgHtml:'<h2>hello Vue!</h2>'
   }
```
## v-on事件绑定
事件绑定有两种写法：
```html
	<button v-on:click="add">加分</button>
	<button @click="subtract">减分</button>
```
然后在vue中添加methods属性，将作用方法写入其中
```js
    methods:{
        add:function () {
           this.score ++;
        },
        subtract : function () {
            this.score--;
        }
    }
```
除了绑定click，还可以绑定其他事件，例如v-on:keyup.enter
案例，给输入框绑定回车事件
```html
	<input type="text"  @keyup.enter="onEnter" v-model="secondCount">
```
```js
	onEnter:function(){
        this.score=parseInt(this.score)+parseInt(this.secondCount);
	 }
```
//v-model   绑定数据源
下面这张表就是绑定案件的出发：例如：v-on:keyup.32="onEnter"  表示按空格出发

## v-model 绑定数据源
可以实现双向数据绑定。多用于表单中，是虚拟dom的渲染
	`<input type="text" v-model="message">`   //绑定了message
v-model的修饰符：
* lazy：取代 imput 监听 change 事件。更改不是实施监听，当失去焦点的时候触发  v-model.lazy
* number：输入字符串转为数字。v-model.number
* trim：输入去掉首尾空格。v-model.trim
实例：
1. 绑定多选框  ------当选中复选框的时候，就会将其添加到webNames数据中
```html		
	<p>多选框绑定一个数组：
	      <input type="checkbox" id="c2" value="2" v-model="webNames"><label for="c2">2</label>
	      <input type="checkbox" id="c3" value="3" v-model="webNames"><label for="c3">3</label>
	      <input type="checkbox" id="c4" value="4" v-model="webNames"><label for="c4">4</label>
	      <input type="checkbox" id="c5" value="5" v-model="webNames"><label for="c5">5</label>
    </p>
     <p>{{webNames}}</p>
```
```js
	var app = new Vue({
	        el:'#app',
	        data:{
	              webNames:[]   //声明一个空数组
	        }
	    });
```

2. 单选框数据绑定---因为设置的v-model相同，所以两个radio也相互绑定了
```html
	<p>单选框按钮绑定：
	      <input type="radio" id="one" value="男" v-model="sex">
	      <label for="one">男</label>
	      <input type="radio" id="two" value="女" v-model="sex">
	      <label for="one">女</label>
	        <p>{{sex}}</p>
	  </p>
```
```js	  
	var app = new Vue({
	        el:'#app',
	        data:{
	              sex:''   //声明一个空
	        }
	    });
```		
## v-bind 绑定标签属性
绑定html标签上的属性，例如设置一个<img>标签上的src属性
例如：
```html 
    <img v-bind:src="imgSrc"  width="200px">
```
```js
	var app=new Vue({
	    el:'#app',
	    data:{
	          imgSrc:'http://baidu.com/wp-content/uploads/2017/02/vue01-2.jpg'
	     }
	})
```
v-bind缩写    --->    :   就一个冒号
		`<img :src="imgSrc"  width="200px">`
绑定CSS样式
在工作中我们经常使用v-bind来绑定css样式：
在绑定CSS样式是，绑定的值必须在vue中的data属性中进行声
* 直接绑定class样式
	`<div :class="className">1、绑定classA</div>`
* 绑定classA并进行判断，在isOK为true时显示样式，在isOk为false时不显示样式。
`<div :class="{classA:isOk}">2、绑定class中的判断</div>`
* 绑定class中的数组
`<div :class="[classA,classB]">3、绑定class中的数组</div>`   //绑定过的数据会以空格分离
* 绑定class中使用三元表达式判断
`<div :class="isOk?classA:classB">4、绑定class中的三元表达式判断</div>`
* 绑定style
`<div :style="{color:red,fontSize:font}">5、绑定style</div>`
* 用对象绑定style样式
`<div :style="styleObject">6、用对象绑定style样式</div>`
>
    1	var app=new Vue({
    2	 el:'#app',
    3	   data:{
    4	       styleObject:{
    5	           fontSize:'24px',
    6	           color:'green'
    7	            }
    8	        }
    9	})

## v-pre & v-cloak & v-once
v-pre就是原样输出，vue不会对其进行渲染
v-cloak渲染完成后才显示其中的值
v-once 只会渲染一次，之后再次更改绑定数据，则不会有影响
```html
    <p>{{message}}</p>
    <p v-pre>{{message}}</p>
    <p v-cloak>渲染完成后才显示</p>
    <p v-once>{{message}}  --只会渲染一次</p>
```


